{"version":3,"sources":["App.js","assets/images/logo.png","components/MintButton.js","logo.svg","reportWebVitals.js","index.js"],"names":["App","useState","fileToShow","setFileToShow","undefined","name","setName","description","setDescription","buffer","setBuffer","className","src","Logo","alt","URL","createObjectURL","accept","type","onChange","event","file","target","files","console","log","reader","FileReader","readAsArrayBuffer","onload","result","onloadend","Buffer","id","label","variant","e","value","client","create","host","port","protocol","MintButton","React","nftContractAddress","process","web3","Web3","mint","nfts","a","alert","window","ethereum","request","method","chainIdOfUser","utils","toHex","add","JSON","stringify","metadata","image","path","content","cid","nftContract","eth","Contract","NFTContractAbi","selectedAddress","account","getTransactionCount","txCount","methods","encodeABI","myNewData","estimateGas","from","nonce","to","data","gasLimit","getGasPrice","gas","transactionParameters","gasPrice","chainId","params","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94b67493.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport MintButton from './components/MintButton';\nimport { useState } from 'react';\nimport { TextField } from '@mui/material'\nimport Logo from './assets/images/logo.png'\n\nfunction App() {\n  const [fileToShow, setFileToShow] = useState(null);\n  const [name, setName] = useState(undefined);\n  const [description, setDescription] = useState(undefined);\n  const [buffer, setBuffer] = useState(undefined);\n\n  const onChange = (event) => {\n    var file = event.target.files[0];\n    console.log('')\n    setFileToShow(event.target.files[0])\n    var reader = new FileReader();\n\n    reader.readAsArrayBuffer(file)\n    reader.onload = function (event) {\n      // The file's text will be printed here\n      console.log(event.target.result)\n    }\n\n    reader.onloadend = () => setBuffer(Buffer(reader.result));\n\n  }\n  return (\n    <div className=\"main-wrapper\">\n      <div className=\"header\">\n        <div className=\"logo\">\n          <img src={Logo} alt=\"\" className=\"\" /> <span>1DogeLand</span>\n        </div>\n      </div>\n      <div className=\"form-wrapper\">\n        <div className=\"image\">\n          {\n            fileToShow && <img className=\"selected-image\" src={URL.createObjectURL(fileToShow)}></img>\n          }\n        </div>\n        <div className=\"upload-input\">\n          <input accept=\"image/png, image/gif, image/jpeg\" type=\"file\" className=\"file-reader custom-file-input\" onChange={onChange} />\n        </div>\n\n        <div className=\"input-wrapper\">\n          <TextField id=\"outlined-basic\" className=\"input-name\" label=\"Name\" variant=\"outlined\" onChange={(e) => setName(e.target.value)} />\n        </div>\n        <div className=\"input-wrapper\">\n          <TextField id=\"outlined-basic\" className=\"input-description\" label=\"Description\" variant=\"outlined\" onChange={(e) => setDescription(e.target.value)} />\n        </div>\n        <div className=\"btn-wrapper\">\n          <MintButton fileToShow={fileToShow} name={name} description={description} buffer={buffer}>\n          </MintButton>\n        </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.d76438cd.png\";","import React from \"react\";\nimport { Button  } from \"react-bootstrap\";\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Dialog from '@material-ui/core/Dialog';\nimport ImageSelector from \"./ImageSelector\";\nimport Web3 from 'web3'\nimport NFTContractAbi from '../abis/nft.json';\nimport { create } from 'ipfs-http-client'\n\n\n// import ipfs from \"../ipfs\";\nconst client = create({\n    host:'ipfs.infura.io',\n    port:5001,\n    protocol:'https'\n})\n\n\nconst MintButton = ({fileToShow, name, description, buffer}) => {\n    const [open, setOpen] = React.useState(false);\n    const chainId = process.env.REACT_APP_CHAIN_ID;\n    const networkUrl = process.env.REACT_APP_NETWORK_URL;\n    const nftContractAddress = process.env.REACT_APP_NFT_CONTRACT;\n    const web3 = new Web3(networkUrl);\n\n      \n\n\n    const handleClose = () => {\n        setOpen(false);\n      };\n\n    const mint = async(nfts) => {\n       if(!fileToShow || !name || !description)\n         alert(\"please fill all data\")\n\n       else{\n           console.log('mint button clicked')\n           console.log(`nfts =========================== ${nfts}`)\n\n           console.log(`chainId =========================== ${chainId}`)\n           // console.log(`chainIdOfUser =========================== ${chainIdOfUser}`)\n       \n           if (!window.ethereum)\n               alert('Please install metamask')\n       \n           const chainIdOfUser = await window.ethereum.request({ method: 'eth_chainId' });\n       \n           if (web3.utils.toHex(chainId) != chainIdOfUser) {\n               alert('Please connect metamask to binance testnet')\n           }\n           else {\n\n            const file = await client.add(buffer);\n            console.log(`file = ${JSON.stringify(file)}`)\n\n\n            const metadata = {\n                name: name,\n                description: description,\n                image: `ipfs://${file.path}`\n            }\n\n            const { cid } = await client.add({ \n                // path: '/nft/metadata.json', \n                content: JSON.stringify(metadata)\n              })\n\n            console.log(`cid = ${cid}`)\n            //    console.log(`nftContractAddress ===== ${nftContractAddress}`)\n       \n               const nftContract = new web3.eth.Contract(NFTContractAbi, nftContractAddress)\n               const account = await window.ethereum.selectedAddress;\n            //    console.log(`account ===== ${account}`)\n       \n            //    if (account === null || account === undefined || account == \"0x0000000000000000000000000000000000000000\")\n            //        alert('Invalid User address')\n       \n            //    else if (nfts > 10)\n            //        alert('Can not mint more than 10 NFTs')\n       \n            //    else {\n                   const txCount = await web3.eth.getTransactionCount(account);\n                   console.log(`nonce ===== ${txCount}`)\n\n                   const myNewData = await nftContract.methods\n                       .mint(`https://ipfs.io/ipfs/${cid}` )\n                       .encodeABI();\n            //        // const eachNFTPrice = await BigNumber(nftContract.methods.price.call().call());\n            //        const eachNFTPrice = await nftContract.methods.price.call().call();\n       \n            //        console.log(`eachNFT price ===== ${eachNFTPrice}`)\n            //        // let totalValue = BigNumber(eachNFTPrice).multiply(1);\n            //        let totalValue = eachNFTPrice * nfts;\n            //        console.log(`total value ===== ${totalValue}`)\n       \n            //        const hexString = await web3.utils.toHex(totalValue)\n                        const gasLimit = await web3.eth.estimateGas({\n                        from: account,\n                        nonce: txCount,\n                        to: nftContractAddress,\n                        data: myNewData,\n                       });\n       \n                   const gas = await web3.eth.getGasPrice();\n       \n                   const transactionParameters = {\n                       nonce: web3.utils.toHex(txCount), // ignored by MetaMask\n                       gasPrice: web3.utils.toHex(gas), // customizable by user during MetaMask confirmation.\n                       gasLimit: web3.utils.toHex(gasLimit), // customizable by user during MetaMask confirmation.\n                       to: nftContractAddress, // Required except during contract publications.\n                       from: account, // must match user's active address.\n                       data: myNewData, // Optional, but used for defining smart contract creation and interaction.\n                       chainId: '0x61', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n                   };\n       \n       \n       \n       \n                   const txHash = await window.ethereum.request({\n                       method: 'eth_sendTransaction',\n                       params: [transactionParameters],\n                   });\n       \n            //    }\n           \n\n          \n       \n       \n           }\n       }\n    }\n\n    return(\n        <div>\n            <Button variant=\"primary\" className=\"btn-mint\" onClick={()=>mint(1)}>Mint NFT</Button>\n        </div>\n    \n    \n    \n    \n    \n        )\n}\n\n\n\n\nexport default MintButton","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}